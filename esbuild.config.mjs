import esbuild from "esbuild";
import process from "process";
import builtins from 'builtin-modules';
import fs from 'fs-extra';
import path from 'path';

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');
const pluginId = 'simple-note-chat';

// Determine the target vault path from environment variable or default
const targetVaultPath = process.env.TARGET_VAULT_PATH || 'test-vault';

const outDir = prod ? '.' : path.join(targetVaultPath, '.obsidian', 'plugins', pluginId);
const outFile = path.join(outDir, 'main.js');
const manifestFile = 'manifest.json';
const stylesFile = 'src/styles.css';
const hotreloadFile = path.join(outDir, '.hotreload');

// Copy manifest, styles, and create hotreload file for development
const copyFilesAndHotreload = async () => {
  try {
    await fs.ensureDir(outDir);

    // Copy manifest.json
    await fs.copy(manifestFile, path.join(outDir, manifestFile));

    // Copy styles.css
    await fs.copy(stylesFile, path.join(outDir, 'styles.css'));

    if (!prod) { // Only in dev mode
      await fs.ensureFile(hotreloadFile);
      console.log('Manifest, styles copied and .hotreload touched.');
    } else {
      console.log('Manifest and styles copied.');
    }
  } catch (err) {
    console.error('Error during post-build steps:', err);
  }
};

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ['src/main.ts'],
  bundle: true,
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    ...builtins
  ],
  format: 'cjs',
  target: 'es2018',
  logLevel: "info",
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: outFile,
  plugins: [{
    name: 'on-rebuild-plugin',
    setup(build) {
      build.onEnd(async (result) => {
        if (result.errors.length === 0) {
          console.log('Initial build successful.');
          await copyFilesAndHotreload();
        } else {
          console.error('Initial build failed:', result.errors);
        }
      });
    },
  }],
});

if (prod) {
  await context.rebuild();
  console.log('Production build complete.');
  await context.dispose();
} else {
  // Development mode: watch for changes
  await context.watch();
  console.log(`Watching for changes... Outputting to ${outDir}`);

  // Need to recreate context to handle rebuilds correctly in watch mode
  await context.dispose();

  const watchContext = await esbuild.context({
    banner: { js: banner },
    entryPoints: ['src/main.ts'],
    bundle: true,
    external: [
      'obsidian', 'electron', '@codemirror/autocomplete', '@codemirror/collab',
      '@codemirror/commands', '@codemirror/language', '@codemirror/lint',
      '@codemirror/search', '@codemirror/state', '@codemirror/view',
      '@lezer/common', '@lezer/highlight', '@lezer/lr', ...builtins
    ],
    format: 'cjs',
    target: 'es2018',
    logLevel: "info",
    sourcemap: 'inline',
    treeShaking: true,
    outfile: outFile,
    plugins: [{
      name: 'on-rebuild-watch-plugin',
      setup(build) {
        build.onEnd(async (result) => {
          if (result.errors.length === 0) {
            console.log('Build successful.');
            await copyFilesAndHotreload();
          } else {
            console.error('Build failed:', result.errors);
          }
        });
      },
    }],
  });

  await watchContext.watch();
  console.log(`Watching for changes... Outputting to ${outDir}`);
}
